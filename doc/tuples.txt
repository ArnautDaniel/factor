FACTOR TUPLES

Tuples are user-defined types with named fields, somewhat analogous to
classes or structs in other languages, however they support dynamic
method dispatch as well as delegation.

* Defining a tuple

TUPLE: point x y z ;

This defines a new type, 'tuple', and the following words:

point-x set-point-x
point-y set-point-y
point-z set-point-z
point?

To be able to create new instances of tuples, you must define a
constructor:

C: point ( x y z -- point )
    [ set-point-z ] keep
    [ set-point-y ] keep
    [ set-point-x ] keep ;

Calling 'class' on a tuple returns the tuple's class, so these are
genuine, disjoint types, not some hack based around vectors or
hashtables:

1 2 3 <point> class .
==> point

* Syntax

Tuples have a literal syntax:

1 2 3 <point>

<< point 1 2 3 >>

It is very simple; the tuple class name comes first, followed by the
values of all slots. If insufficient or extraneous slots are specified,
an error is raised.

* Generic words

You can define methods for generic words on tuples, just like with any
other class. For more information, see generic.txt.

* Delegation

If a tuple defines a slot named 'delegate', any generic words called on
the tuple that are not defined for the tuple's class will be passed on
to the delegate.

This idiom is used in the I/O code for wrapper streams. For example, the
ansi-stream class delegates all generic words to its underlying stream,
except for fwrite-attr, which outputs the necessary terminal escape
codes. Another example is stdio-stream, which performs all I/O on its
underlying stream, except it flushes after every new line (which would
be undesirable for say, a file).

The UI uses delegation extensively, and will be documented separately.

Delegation is used instead of inheritance in Factor, but it is not a
substitute; in particular, the semantics differ in that a delegated
method call receives the delegate on the stack, not the original object.
