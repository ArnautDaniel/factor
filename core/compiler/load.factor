PROVIDE: core/compiler
{ +files+ {
    "inference/shuffle.factor"
    "inference/dataflow.factor"
    "inference/variables.factor"
    "inference/inference.factor"
    "inference/branches.factor"
    "inference/words.factor"
    "inference/stack.factor"
    "inference/known-words.factor"
    "inference/errors.factor"

    "optimizer/specializers.factor"
    "optimizer/class-infer.factor"
    "optimizer/kill-literals.factor"
    "optimizer/optimizer.factor"
    "optimizer/inline-methods.factor"
    "optimizer/call-optimizers.factor"

    "generator/architecture.factor"
    "generator/templates.factor"
    "generator/xt.factor"
    "generator/generator.factor"

    "compiler.factor"

    "alien/malloc.factor"
    "alien/c-types.factor"
    "alien/structs.factor"
    "alien/compiler.factor"
    "alien/alien-invoke.factor"
    "alien/alien-callback.factor"
    "alien/alien-indirect.factor"
    "alien/syntax.factor"

    "alien/alien-callback.facts"
    "alien/alien-indirect.facts"
    "alien/alien-invoke.facts"
    "alien/aliens.facts"
    "alien/c-types.facts"
    "alien/malloc.facts"
    "alien/structs.facts"
    "alien/syntax.facts"
    "inference/branches.facts"
    "inference/dataflow.facts"
    "inference/inference.facts"
    "inference/shuffle.facts"
    "inference/stack.facts"
    "inference/words.facts"
    "compiler.facts"
} }
{ +tests+ {
    "test/inference.factor"
    "test/alien-objects.factor"
    "test/simple.factor"
    "test/templates.factor"
    "test/stack.factor"
    "test/ifte.factor"
    "test/generic.factor"
    "test/bail-out.factor"
    "test/intrinsics.factor"
    "test/float.factor"
    "test/identities.factor"
    "test/optimizer.factor"
    "test/alien.factor"
    "test/callbacks.factor"
    "test/stack-trace.factor"
} } ;
