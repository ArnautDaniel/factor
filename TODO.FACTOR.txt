76:
---

- set-length should not shorten the underlying sequence
- i/o: don't keep creating new sbufs
- [ EAX 0 ] --> [ EAX ]
- rollovers broken with menus
- menu dragging
- fix up the min thumb size hack
- nicer scrollbars with up/down buttons
- gaps in pack layout
- fix listener prompt display after presentation commands invoked
- tutorial: clickable code snippets
- theme abstraction in ui
- stray gesture son stack

+ misc

Investigate:

  http://developer.apple.com/technotes/tn2004/tn2123.html#SECLIMITATIONS
  http://www.caddr.com/macho/archives/sbcl-devel/2005-3/4742.html
  http://www.caddr.com/macho/archives/sbcl-devel/2005-3/4764.html
  http://clozure.com/cgi-bin/viewcvs.cgi/ccl/lisp-kernel/lisp-exceptions.c?rev=1.9&content-type=text/vnd.viewcvs-markup

- http keep alive, and range get
- code walker & exceptions
- faster repaint

+ ffi:

- smarter out parameter handling
- clarify powerpc passing of value struct parameters
- ffi unicode strings: null char security hole
- utf16 string boxing
- value type structs
- bitfields in C structs
- setting struct members that are not *

+ compiler:

- inference needs to be more robust with heavily recursive code
- powerpc: float ffi parameters
- fix fixnum<< and /i overflow on PowerPC
- simplifier:
  - kill replace after a peek
  - merge inc-d's across VOPs that don't touch the stack
- intrinsic char-slot set-char-slot integer-slot set-integer-slot
- [ [ dup call ] dup call ] infer hangs
- more accurate types for various words
- declarations
- type inference fails with some assembler words;
  displaced, register and other predicates need to inherit from list
  not cons, and need stronger branch partial eval
- optimize away arithmetic dispatch
- the invalid recursion form case needs to be fixed, for inlines too
- #jump-f #jump-f-label
- re-introduce #target-label => #target optimization

+ sequences

- dipping 2nmap, 2each
- array sort
- nappend: instead of using push, enlarge the sequence with set-length
  then add set the elements with set-nth
- specialized arrays

+ kernel:

- sleep word
- there is a problem with hashcodes of words and bootstrapping
- delegating generic words with a non-standard picker
- powerpc has weird callstack residue
- instances: do not use make-list
- unions containing tuples do not work properly
- method doc strings
- clean up metaclasses
- vectors: ensure its ok with bignum indices
- code gc
- doc comments of generics
- M: object should not inhibit delegation
- renumber types appopriately

+ i/o:

- faster stream-copy
- reading and writing byte arrays
- clean up line reading code in win32-io
- unix io: handle \n\r and \n\0
- stream server can hang because of exception handler limitations
- better i/o scheduler
- unify unparse and prettyprint
- utf16, utf8 encoding
- fix i/o on generic x86/ppc unix
- if two tasks write to a unix stream, the buffer can overflow
- rename prettyprint* to pprint, prettyprint to pp
- reader syntax for arrays, byte arrays, displaced aliens
- print parsing words in bold

+ nice to have libraries:

- regexps
- XML
- real Unicode support (strings are already 16 bits and can be extended
  to 21 if the need arises, but we need full character classification
  predicates, comparison, case conversion, sorting...)
- full Win32 binding
- Cairo binding
